apiVersion: v1
kind: ConfigMap
metadata:
  name: airflow-config
  namespace: crypto-forecasting
  labels:
    app: airflow
    environment: dev
data:
  AIRFLOW__CORE__EXECUTOR: LocalExecutor
  AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql://crypto:crypto123@postgres-service:5432/crypto_forecasting
  AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
  AIRFLOW__CORE__LOAD_EXAMPLES: "false"
  AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.basic_auth
  AIRFLOW__WEBSERVER__EXPOSE_CONFIG: "true"
  AIRFLOW__WEBSERVER__RBAC: "false"
  AIRFLOW__CORE__FERNET_KEY: "your-fernet-key-here"
  AIRFLOW__WEBSERVER__SECRET_KEY: "your-secret-key-here"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: airflow-dags-pvc
  namespace: crypto-forecasting
  labels:
    app: airflow
    environment: dev
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi  # Reduced size for dev
  storageClassName: standard
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: airflow-logs-pvc
  namespace: crypto-forecasting
  labels:
    app: airflow
    environment: dev
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi  # Reduced size for dev
  storageClassName: standard
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-webserver
  namespace: crypto-forecasting
  labels:
    app: airflow
    component: webserver
    environment: dev
spec:
  replicas: 1  # Single replica for dev
  selector:
    matchLabels:
      app: airflow
      component: webserver
  template:
    metadata:
      labels:
        app: airflow
        component: webserver
    spec:
      containers:
      - name: airflow-webserver
        image: crypto-forecasting-airflow:dev
        imagePullPolicy: Never  # Use dev images
        ports:
        - containerPort: 8080
        envFrom:
        - configMapRef:
            name: airflow-config
        env:
        - name: ENVIRONMENT
          value: "dev"
        volumeMounts:
        - name: dags
          mountPath: /opt/airflow/dags
        - name: logs
          mountPath: /opt/airflow/logs
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 120  # Longer delay for dev
          periodSeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 500m     # Reduced for dev
            memory: 1Gi
          requests:
            cpu: 100m     # Lower requests for dev
            memory: 512Mi
      volumes:
      - name: dags
        persistentVolumeClaim:
          claimName: airflow-dags-pvc
      - name: logs
        persistentVolumeClaim:
          claimName: airflow-logs-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-scheduler
  namespace: crypto-forecasting
  labels:
    app: airflow
    component: scheduler
    environment: dev
spec:
  replicas: 1  # Single replica for dev
  selector:
    matchLabels:
      app: airflow
      component: scheduler
  template:
    metadata:
      labels:
        app: airflow
        component: scheduler
    spec:
      containers:
      - name: airflow-scheduler
        image: crypto-forecasting-airflow:dev
        imagePullPolicy: Never  # Use dev images
        command: ["airflow", "scheduler"]
        envFrom:
        - configMapRef:
            name: airflow-config
        env:
        - name: ENVIRONMENT
          value: "dev"
        volumeMounts:
        - name: dags
          mountPath: /opt/airflow/dags
        - name: logs
          mountPath: /opt/airflow/logs
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "airflow jobs check --job-type SchedulerJob --hostname $(hostname)"
          initialDelaySeconds: 120
          periodSeconds: 60
          timeoutSeconds: 30
        resources:
          limits:
            cpu: 500m     # Reduced for dev
            memory: 1Gi
          requests:
            cpu: 100m     # Lower requests for dev
            memory: 512Mi
      volumes:
      - name: dags
        persistentVolumeClaim:
          claimName: airflow-dags-pvc
      - name: logs
        persistentVolumeClaim:
          claimName: airflow-logs-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: airflow-webserver-service
  namespace: crypto-forecasting
  labels:
    app: airflow
    component: webserver
    environment: dev
spec:
  type: NodePort  # Use NodePort for dev access
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: webserver
    nodePort: 30080  # Fixed port for dev access
  selector:
    app: airflow
    component: webserver
